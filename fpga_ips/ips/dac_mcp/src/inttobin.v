// -------------------------------------------------------------
// 
// File Name: .\hdlsrc\int2bin_sdi\inttobin.v
// Created: 2024-11-01 08:51:56
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: inttobin
// Source Path: int2bin_sdi/model_int2bin_sdi/in2bin/inttobin
// Hierarchy Level: 2
// Model version: 3.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module inttobin
          (In1,
           vector_bin_0,
           vector_bin_1,
           vector_bin_2,
           vector_bin_3,
           vector_bin_4,
           vector_bin_5,
           vector_bin_6,
           vector_bin_7);


  input   [7:0] In1;  // uint8
  output  vector_bin_0;  // boolean
  output  vector_bin_1;  // boolean
  output  vector_bin_2;  // boolean
  output  vector_bin_3;  // boolean
  output  vector_bin_4;  // boolean
  output  vector_bin_5;  // boolean
  output  vector_bin_6;  // boolean
  output  vector_bin_7;  // boolean


  wire y_1;  // ufix1
  wire y_2;  // ufix1
  wire y_3;  // ufix1
  wire y_4;  // ufix1
  wire y_5;  // ufix1
  wire y_6;  // ufix1
  wire y_7;  // ufix1
  wire y_8;  // ufix1
  wire [7:0] y;  // ufix1 [8]
  reg  [7:0] Data_Type_Conversion_out1;  // boolean [8]
  reg signed [31:0] Data_Type_Conversion_ii;  // int32
  reg  Data_Type_Conversion_y;  // ufix1


  assign y_1 = In1[7];

  assign y_2 = In1[6];

  assign y_3 = In1[5];

  assign y_4 = In1[4];

  assign y_5 = In1[3];

  assign y_6 = In1[2];

  assign y_7 = In1[1];

  assign y_8 = In1[0];

  assign y[0] = y_1;
  assign y[1] = y_2;
  assign y[2] = y_3;
  assign y[3] = y_4;
  assign y[4] = y_5;
  assign y[5] = y_6;
  assign y[6] = y_7;
  assign y[7] = y_8;
  always @* begin
    Data_Type_Conversion_y = 1'b0;

    for(Data_Type_Conversion_ii = 32'sd0; Data_Type_Conversion_ii <= 32'sd7; Data_Type_Conversion_ii = Data_Type_Conversion_ii + 32'sd1) begin
      if (y[Data_Type_Conversion_ii] != 1'b0) begin
        Data_Type_Conversion_y = 1'b1;
      end
      else begin
        Data_Type_Conversion_y = 1'b0;
      end
      Data_Type_Conversion_out1[Data_Type_Conversion_ii] = Data_Type_Conversion_y;
    end

  end
  assign vector_bin_0 = Data_Type_Conversion_out1[0];

  assign vector_bin_1 = Data_Type_Conversion_out1[1];

  assign vector_bin_2 = Data_Type_Conversion_out1[2];

  assign vector_bin_3 = Data_Type_Conversion_out1[3];

  assign vector_bin_4 = Data_Type_Conversion_out1[4];

  assign vector_bin_5 = Data_Type_Conversion_out1[5];

  assign vector_bin_6 = Data_Type_Conversion_out1[6];

  assign vector_bin_7 = Data_Type_Conversion_out1[7];

endmodule  // inttobin

