// -------------------------------------------------------------
// 
// File Name: .\hdlsrc\int2bin_sdi\int2bin.v
// Created: 2024-11-01 08:51:56
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: int2bin
// Source Path: int2bin_sdi/model_int2bin_sdi/in2bin/int2bin
// Hierarchy Level: 2
// Model version: 3.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module int2bin
          (clk,
           rst,
           done,
           vx_x_cha,
           selector,
           en_sdi);

  // Default encoded enumeration values for type state_type_is_int2bin
  parameter state_type_is_int2bin_IN_ON110 = 2'd0, state_type_is_int2bin_IN_selector = 2'd1, state_type_is_int2bin_IN_selector1 = 2'd2, state_type_is_int2bin_IN_selector2 = 2'd3;

  input   clk;
  input   rst;
  input   done;
  input   [7:0] vx_x_cha;  // uint8
  output  [7:0] selector;  // uint8
  output  en_sdi;


  reg [7:0] cnt;  // uint8
  reg [7:0] cnt_clk;  // uint8
  reg [1:0] is_int2bin;  // uint8
  reg [7:0] selector_reg;  // uint8
  reg  en_sdi_reg;
  reg [7:0] cnt_next;  // uint8
  reg [7:0] cnt_clk_next;  // uint8
  reg [1:0] is_int2bin_next;  // enum type state_type_is_int2bin (4 enums)
  reg [7:0] selector_reg_next;  // uint8
  reg  en_sdi_reg_next;
  reg  guard1;
  reg [7:0] cnt_temp;  // uint8
  reg [7:0] cnt_clk_temp;  // uint8
  reg [8:0] add_temp;  // ufix9
  reg [8:0] add_temp_0;  // ufix9
  reg [8:0] add_temp_1;  // ufix9
  reg [8:0] t_0;  // ufix9
  reg [8:0] t_1;  // ufix9
  reg [8:0] t_2;  // ufix9


  always @(posedge clk)
    begin : int2bin_1_process
      if (rst == 1'b1) begin
        selector_reg <= 8'd0;
        cnt_clk <= 8'd0;
        //Entry: model_int2bin_sdi/in2bin/int2bin
        //Entry Internal: model_int2bin_sdi/in2bin/int2bin
        //Transition
        is_int2bin <= state_type_is_int2bin_IN_ON110;
        //Entry 'ON1'
        cnt <= 8'd0;
        en_sdi_reg <= 1'b0;
      end
      else begin
        cnt <= cnt_next;
        cnt_clk <= cnt_clk_next;
        is_int2bin <= is_int2bin_next;
        selector_reg <= selector_reg_next;
        en_sdi_reg <= en_sdi_reg_next;
      end
    end

  always @(cnt, cnt_clk, done, en_sdi_reg, is_int2bin, selector_reg, vx_x_cha) begin
    add_temp = 9'b000000000;
    add_temp_0 = 9'b000000000;
    add_temp_1 = 9'b000000000;
    t_0 = 9'b000000000;
    t_1 = 9'b000000000;
    t_2 = 9'b000000000;
    cnt_temp = cnt;
    cnt_clk_temp = cnt_clk;
    selector_reg_next = selector_reg;
    en_sdi_reg_next = en_sdi_reg;
    is_int2bin_next = is_int2bin;
    //Gateway: model_int2bin_sdi/in2bin/int2bin
    //During: model_int2bin_sdi/in2bin/int2bin
    guard1 = 1'b0;
    case ( is_int2bin)
      state_type_is_int2bin_IN_ON110 :
        begin
          //During 'ON1'
          //Transition
          is_int2bin_next = state_type_is_int2bin_IN_selector;
          //Entry 'selector'
          t_1 = {1'b0, cnt};
          add_temp_0 = t_1 + 9'b000000001;
          if (add_temp_0[8] != 1'b0) begin
            cnt_temp = 8'b11111111;
          end
          else begin
            cnt_temp = add_temp_0[7:0];
          end
          selector_reg_next = cnt_temp;
          en_sdi_reg_next = 1'b1;
        end
      state_type_is_int2bin_IN_selector :
        begin
          //During 'selector'
          //Transition
          is_int2bin_next = state_type_is_int2bin_IN_selector2;
          //Entry 'selector2'
          selector_reg_next = cnt;
        end
      state_type_is_int2bin_IN_selector1 :
        begin
          //During 'selector1'
          if (done) begin
            //Transition
            if (cnt < vx_x_cha) begin
              //Transition
              is_int2bin_next = state_type_is_int2bin_IN_selector;
              //Entry 'selector'
              t_0 = {1'b0, cnt};
              add_temp_1 = t_0 + 9'b000000001;
              if (add_temp_1[8] != 1'b0) begin
                cnt_temp = 8'b11111111;
              end
              else begin
                cnt_temp = add_temp_1[7:0];
              end
              selector_reg_next = cnt_temp;
              en_sdi_reg_next = 1'b1;
            end
            else if (cnt >= vx_x_cha) begin
              //Transition
              is_int2bin_next = state_type_is_int2bin_IN_ON110;
              //Entry 'ON1'
              cnt_temp = 8'd0;
              en_sdi_reg_next = 1'b0;
            end
            else begin
              guard1 = 1'b1;
            end
          end
          else begin
            guard1 = 1'b1;
          end
        end
      default :
        begin
          //case IN_selector2:
          //During 'selector2'
          //Transition
          t_2 = {1'b0, cnt_clk};
          add_temp = t_2 + 9'b000000001;
          if (add_temp[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp[7:0];
          end
          if (cnt_clk_temp >= 8'b00001011) begin
            //Transition
            is_int2bin_next = state_type_is_int2bin_IN_selector1;
            //Entry 'selector1'
            selector_reg_next = cnt;
            cnt_clk_temp = 8'd0;
          end
          else if (cnt_clk_temp < 8'b00001011) begin
            //Transition
            is_int2bin_next = state_type_is_int2bin_IN_selector2;
            //Entry 'selector2'
            selector_reg_next = cnt;
          end
          else begin
            selector_reg_next = cnt;
          end
        end
    endcase
    if (guard1) begin
      selector_reg_next = cnt_temp;
      cnt_clk_temp = 8'd0;
    end
    cnt_next = cnt_temp;
    cnt_clk_next = cnt_clk_temp;
  end

  assign selector = selector_reg_next;
  assign en_sdi = en_sdi_reg_next;
endmodule  // int2bin

