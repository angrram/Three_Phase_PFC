// -------------------------------------------------------------
// 
// File Name: .\hdlsrc\int2bin_sdi\dispatcher.v
// Created: 2024-09-18 12:34:23
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dispatcher
// Source Path: int2bin_sdi/model_int2bin_sdi/in2bin/sdi/dispatcher
// Hierarchy Level: 3
// Model version: 1.47
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dispatcher
          (clk,
           rst,
           enb_1_20_0,
           selector,
           vector_bin_0,
           vector_bin_1,
           vector_bin_2,
           vector_bin_3,
           vector_bin_4,
           vector_bin_5,
           vector_bin_6,
           vector_bin_7,
           en_sdi,
           done,
           SDI,
           SCK,
           nCS1,
           nCS2,
           nCS3);

  // Default encoded enumeration values for type state_type_is_dispatcher
  parameter state_type_is_dispatcher_IN_en_s = 5'd0, state_type_is_dispatcher_IN_off = 5'd1, state_type_is_dispatcher_IN_on = 5'd2, state_type_is_dispatcher_IN_on1 = 5'd3, state_type_is_dispatcher_IN_on10 = 5'd4, state_type_is_dispatcher_IN_on11 = 5'd5, state_type_is_dispatcher_IN_on12 = 5'd6, state_type_is_dispatcher_IN_on13 = 5'd7, state_type_is_dispatcher_IN_on14 = 5'd8, state_type_is_dispatcher_IN_on15 = 5'd9, state_type_is_dispatcher_IN_on16 = 5'd10, state_type_is_dispatcher_IN_on17 = 5'd11, state_type_is_dispatcher_IN_on18 = 5'd12, state_type_is_dispatcher_IN_on19 = 5'd13, state_type_is_dispatcher_IN_on2 = 5'd14, state_type_is_dispatcher_IN_on20 = 5'd15, state_type_is_dispatcher_IN_on21 = 5'd16, state_type_is_dispatcher_IN_on22 = 5'd17, state_type_is_dispatcher_IN_on23 = 5'd18, state_type_is_dispatcher_IN_on3 = 5'd19, state_type_is_dispatcher_IN_on4 = 5'd20, state_type_is_dispatcher_IN_on5 = 5'd21, state_type_is_dispatcher_IN_on6 = 5'd22, state_type_is_dispatcher_IN_on7 = 5'd23, state_type_is_dispatcher_IN_on8 = 5'd24, state_type_is_dispatcher_IN_on9 = 5'd25;

  input   clk;
  input   rst;
  input   enb_1_20_0;
  input   [7:0] selector;  // uint8
  input   vector_bin_0;  // boolean
  input   vector_bin_1;  // boolean
  input   vector_bin_2;  // boolean
  input   vector_bin_3;  // boolean
  input   vector_bin_4;  // boolean
  input   vector_bin_5;  // boolean
  input   vector_bin_6;  // boolean
  input   vector_bin_7;  // boolean
  input   en_sdi;
  output  done;
  output  SDI;
  output  SCK;
  output  nCS1;
  output  nCS2;
  output  nCS3;


  wire [7:0] vector_bin;  // boolean [8]
  reg [7:0] cnt;  // uint8
  reg [7:0] cnt_clk;  // uint8
  reg [4:0] is_dispatcher;  // uint8
  reg  done_reg;
  reg  SDI_reg;
  reg  SCK_reg;
  reg  nCS1_reg;
  reg  nCS2_reg;
  reg  nCS3_reg;
  reg [7:0] cnt_next;  // uint8
  reg [7:0] cnt_clk_next;  // uint8
  reg [4:0] is_dispatcher_next;  // enum type state_type_is_dispatcher (26 enums)
  reg  done_reg_next;
  reg  SDI_reg_next;
  reg  SCK_reg_next;
  reg  nCS1_reg_next;
  reg  nCS2_reg_next;
  reg  nCS3_reg_next;
  reg  guard1;
  reg  guard2;
  reg [7:0] cnt_temp;  // uint8
  reg [7:0] cnt_clk_temp;  // uint8
  reg [8:0] add_temp;  // ufix9
  reg [8:0] add_temp_0;  // ufix9
  reg [8:0] add_temp_1;  // ufix9
  reg [8:0] add_temp_2;  // ufix9
  reg [8:0] add_temp_3;  // ufix9
  reg [8:0] add_temp_4;  // ufix9
  reg [8:0] add_temp_5;  // ufix9
  reg [8:0] add_temp_6;  // ufix9
  reg [8:0] add_temp_7;  // ufix9
  reg [8:0] add_temp_8;  // ufix9
  reg [8:0] add_temp_9;  // ufix9
  reg [8:0] add_temp_10;  // ufix9
  reg [8:0] add_temp_11;  // ufix9
  reg [8:0] add_temp_12;  // ufix9
  reg [8:0] add_temp_13;  // ufix9
  reg [8:0] add_temp_14;  // ufix9
  reg [8:0] add_temp_15;  // ufix9
  reg [8:0] add_temp_16;  // ufix9
  reg [8:0] add_temp_17;  // ufix9
  reg [8:0] add_temp_18;  // ufix9
  reg [8:0] add_temp_19;  // ufix9
  reg [8:0] add_temp_20;  // ufix9
  reg [8:0] add_temp_21;  // ufix9
  reg [8:0] add_temp_22;  // ufix9
  reg [8:0] add_temp_23;  // ufix9
  reg signed [8:0] sub_temp;  // sfix9
  reg [1:0] cast;  // ufix2
  reg [2:0] t_0;  // ufix3
  reg [8:0] t_1;  // ufix9
  reg [8:0] t_2;  // ufix9
  reg [8:0] t_3;  // ufix9
  reg [8:0] t_4;  // ufix9
  reg [8:0] t_5;  // ufix9
  reg [8:0] t_6;  // ufix9
  reg [8:0] t_7;  // ufix9
  reg [8:0] t_8;  // ufix9
  reg [8:0] t_9;  // ufix9
  reg [8:0] t_10;  // ufix9
  reg [8:0] t_11;  // ufix9
  reg [8:0] t_12;  // ufix9
  reg [8:0] t_13;  // ufix9
  reg [8:0] t_14;  // ufix9
  reg [8:0] t_15;  // ufix9
  reg [8:0] t_16;  // ufix9
  reg [8:0] t_17;  // ufix9
  reg [8:0] t_18;  // ufix9
  reg [8:0] t_19;  // ufix9
  reg [8:0] t_20;  // ufix9
  reg [8:0] t_21;  // ufix9
  reg [8:0] t_22;  // ufix9
  reg [8:0] t_23;  // ufix9
  reg [8:0] t_24;  // ufix9
  reg [8:0] t_25;  // ufix9
  reg signed [8:0] t_26;  // sfix9


  assign vector_bin[0] = vector_bin_0;
  assign vector_bin[1] = vector_bin_1;
  assign vector_bin[2] = vector_bin_2;
  assign vector_bin[3] = vector_bin_3;
  assign vector_bin[4] = vector_bin_4;
  assign vector_bin[5] = vector_bin_5;
  assign vector_bin[6] = vector_bin_6;
  assign vector_bin[7] = vector_bin_7;

  always @(posedge clk)
    begin : dispatcher_1_process
      if (rst == 1'b1) begin
        cnt <= 8'd8;
        cnt_clk <= 8'd0;
        //Entry: model_int2bin_sdi/in2bin/sdi/dispatcher
        //Entry Internal: model_int2bin_sdi/in2bin/sdi/dispatcher
        //Transition
        is_dispatcher <= state_type_is_dispatcher_IN_off;
        //Entry 'off'
        done_reg <= 1'b0;
        SDI_reg <= 1'b0;
        SCK_reg <= 1'b0;
        nCS1_reg <= 1'b1;
        nCS2_reg <= 1'b1;
        nCS3_reg <= 1'b1;
      end
      else begin
        if (enb_1_20_0) begin
          cnt <= cnt_next;
          cnt_clk <= cnt_clk_next;
          is_dispatcher <= is_dispatcher_next;
          done_reg <= done_reg_next;
          SDI_reg <= SDI_reg_next;
          SCK_reg <= SCK_reg_next;
          nCS1_reg <= nCS1_reg_next;
          nCS2_reg <= nCS2_reg_next;
          nCS3_reg <= nCS3_reg_next;
        end
      end
    end

  always @* begin
    add_temp = 9'b000000000;
    add_temp_0 = 9'b000000000;
    add_temp_1 = 9'b000000000;
    add_temp_2 = 9'b000000000;
    add_temp_3 = 9'b000000000;
    add_temp_4 = 9'b000000000;
    add_temp_5 = 9'b000000000;
    add_temp_6 = 9'b000000000;
    add_temp_7 = 9'b000000000;
    add_temp_8 = 9'b000000000;
    add_temp_9 = 9'b000000000;
    add_temp_10 = 9'b000000000;
    add_temp_11 = 9'b000000000;
    add_temp_12 = 9'b000000000;
    add_temp_13 = 9'b000000000;
    add_temp_14 = 9'b000000000;
    add_temp_15 = 9'b000000000;
    add_temp_16 = 9'b000000000;
    add_temp_17 = 9'b000000000;
    add_temp_18 = 9'b000000000;
    add_temp_19 = 9'b000000000;
    add_temp_20 = 9'b000000000;
    add_temp_21 = 9'b000000000;
    add_temp_22 = 9'b000000000;
    add_temp_23 = 9'b000000000;
    sub_temp = 9'sb000000000;
    t_23 = 9'b000000000;
    t_22 = 9'b000000000;
    t_26 = 9'sb000000000;
    t_21 = 9'b000000000;
    t_20 = 9'b000000000;
    t_19 = 9'b000000000;
    t_18 = 9'b000000000;
    t_17 = 9'b000000000;
    t_16 = 9'b000000000;
    t_15 = 9'b000000000;
    t_14 = 9'b000000000;
    t_13 = 9'b000000000;
    t_12 = 9'b000000000;
    t_11 = 9'b000000000;
    t_10 = 9'b000000000;
    t_9 = 9'b000000000;
    t_8 = 9'b000000000;
    t_7 = 9'b000000000;
    t_6 = 9'b000000000;
    t_5 = 9'b000000000;
    t_4 = 9'b000000000;
    t_3 = 9'b000000000;
    t_25 = 9'b000000000;
    cast = 2'b00;
    t_0 = 3'b000;
    t_2 = 9'b000000000;
    t_1 = 9'b000000000;
    t_24 = 9'b000000000;
    cnt_temp = cnt;
    cnt_clk_temp = cnt_clk;
    done_reg_next = done_reg;
    SDI_reg_next = SDI_reg;
    SCK_reg_next = SCK_reg;
    nCS1_reg_next = nCS1_reg;
    nCS2_reg_next = nCS2_reg;
    nCS3_reg_next = nCS3_reg;
    is_dispatcher_next = is_dispatcher;
    //Gateway: model_int2bin_sdi/in2bin/sdi/dispatcher
    //During: model_int2bin_sdi/in2bin/sdi/dispatcher
    guard1 = 1'b0;
    guard2 = 1'b0;
    case ( is_dispatcher)
      state_type_is_dispatcher_IN_en_s :
        begin
          //During 'en_s'
          if (selector == 8'b00000001) begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on;
            //Entry 'on'
            //activate nA output, SDI false
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b0;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b1;
          end
          else if (selector == 8'b00000010) begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on15;
            //Entry 'on15'
            //activate B output, SDI true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b0;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b1;
          end
          else if (selector == 8'b00000101) begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on21;
            //Entry 'on21'
            //activate nA output, SDI false
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b0;
          end
          else if (selector == 8'b00000110) begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on23;
            //Entry 'on23'
            //on15 %activate B output, SDI true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b0;
          end
          else if (selector == 8'b00000100) begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on19;
            //Entry 'on19'
            //on15 %activate B output, SDI true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b0;
            nCS3_reg_next = 1'b1;
          end
          else if (selector == 8'b00000011) begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on17;
            //Entry 'on17'
            //activate nA output, SDI false
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b0;
            nCS3_reg_next = 1'b1;
          end
          else begin
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_off :
        begin
          //During 'off'
          if (en_sdi) begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_en_s;
            //Entry 'en_s'
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b1;
          end
          else begin
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_on :
        begin
          //During 'on'
          //Transition
          t_1 = {1'b0, cnt_clk};
          add_temp = t_1 + 9'b000000001;
          if (add_temp[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on1;
            //Entry 'on1'
            //activate nA output, SDI false
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b1;
            nCS1_reg_next = 1'b0;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b1;
          end
          else begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on;
            //Entry 'on'
            //activate nA output, SDI false
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b0;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_on1 :
        begin
          //During 'on1'
          //Transition
          t_2 = {1'b0, cnt_clk};
          add_temp_0 = t_2 + 9'b000000001;
          if (add_temp_0[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_0[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on12;
            //Entry 'on12'
            //IDNTC bit, SDI=true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
          end
          else begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on1;
            //Entry 'on1'
            //activate nA output, SDI false
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b1;
            nCS1_reg_next = 1'b0;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_on10 :
        begin
          //During 'on10'
          //Transition
          t_3 = {1'b0, cnt_clk};
          add_temp_1 = t_3 + 9'b000000001;
          if (add_temp_1[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_1[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            //Transition
            t_25 = {1'b0, cnt};
            add_temp_23 = t_25 + 9'b000000001;
            if (add_temp_23[8] != 1'b0) begin
              cnt_temp = 8'b11111111;
            end
            else begin
              cnt_temp = add_temp_23[7:0];
            end
            if (cnt_temp >= 8'b00000100) begin
              //Transition
              is_dispatcher_next = state_type_is_dispatcher_IN_on8;
              //Entry 'on8'
              done_reg_next = 1'b1;
              SDI_reg_next = 1'b0;
              SCK_reg_next = 1'b0;
              cnt_temp = 8'd8;
            end
            else begin
              cast = cnt_temp[1:0];
              t_0 = {1'b0, cast};
              if (t_0 < 3'b101) begin
                //Transition
                is_dispatcher_next = state_type_is_dispatcher_IN_on9;
                //Entry 'on9'
                //SDI=v1_1
                done_reg_next = 1'b0;
                SDI_reg_next = 1'b0;
                SCK_reg_next = 1'b0;
              end
              else begin
                guard1 = 1'b1;
              end
            end
          end
          else begin
            guard1 = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_on11 :
        begin
          //During 'on11'
          //Transition
          t_4 = {1'b0, cnt_clk};
          add_temp_2 = t_4 + 9'b000000001;
          if (add_temp_2[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_2[7:0];
          end
          if (cnt_clk_temp > 8'b00000011) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_off;
            //Entry 'off'
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b1;
          end
          else begin
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
            cnt_temp = 8'd8;
          end
        end
      state_type_is_dispatcher_IN_on12 :
        begin
          //During 'on12'
          //Transition
          t_5 = {1'b0, cnt_clk};
          add_temp_3 = t_5 + 9'b000000001;
          if (add_temp_3[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_3[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on13;
            //Entry 'on13'
            //IDNTC bit, SDI=true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b1;
          end
          else begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on12;
            //Entry 'on12'
            //IDNTC bit, SDI=true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
          end
        end
      state_type_is_dispatcher_IN_on13 :
        begin
          //During 'on13'
          //Transition
          t_6 = {1'b0, cnt_clk};
          add_temp_4 = t_6 + 9'b000000001;
          if (add_temp_4[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_4[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on2;
            //Entry 'on2'
            //nGA must be always true, SDI=true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b0;
          end
          else begin
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_on14 :
        begin
          //During 'on14'
          //Transition
          t_7 = {1'b0, cnt_clk};
          add_temp_5 = t_7 + 9'b000000001;
          if (add_temp_5[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_5[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on12;
            //Entry 'on12'
            //IDNTC bit, SDI=true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
          end
          else begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on14;
            //Entry 'on14'
            //activate B output, SDI true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b1;
            nCS1_reg_next = 1'b0;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_on15 :
        begin
          //During 'on15'
          //Transition
          t_8 = {1'b0, cnt_clk};
          add_temp_6 = t_8 + 9'b000000001;
          if (add_temp_6[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_6[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on14;
            //Entry 'on14'
            //activate B output, SDI true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b1;
            nCS1_reg_next = 1'b0;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b1;
          end
          else begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on15;
            //Entry 'on15'
            //activate B output, SDI true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b0;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_on16 :
        begin
          //During 'on16'
          //Transition
          t_9 = {1'b0, cnt_clk};
          add_temp_7 = t_9 + 9'b000000001;
          if (add_temp_7[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_7[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on12;
            //Entry 'on12'
            //IDNTC bit, SDI=true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
          end
          else begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on16;
            //Entry 'on16'
            //activate nA output, SDI false
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b1;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b0;
            nCS3_reg_next = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_on17 :
        begin
          //During 'on17'
          //Transition
          t_10 = {1'b0, cnt_clk};
          add_temp_8 = t_10 + 9'b000000001;
          if (add_temp_8[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_8[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on16;
            //Entry 'on16'
            //activate nA output, SDI false
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b1;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b0;
            nCS3_reg_next = 1'b1;
          end
          else begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on17;
            //Entry 'on17'
            //activate nA output, SDI false
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b0;
            nCS3_reg_next = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_on18 :
        begin
          //During 'on18'
          //Transition
          t_11 = {1'b0, cnt_clk};
          add_temp_9 = t_11 + 9'b000000001;
          if (add_temp_9[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_9[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on12;
            //Entry 'on12'
            //IDNTC bit, SDI=true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
          end
          else begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on18;
            //Entry 'on18'
            //on15 %activate B output, SDI true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b1;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b0;
            nCS3_reg_next = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_on19 :
        begin
          //During 'on19'
          //Transition
          t_12 = {1'b0, cnt_clk};
          add_temp_10 = t_12 + 9'b000000001;
          if (add_temp_10[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_10[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on18;
            //Entry 'on18'
            //on15 %activate B output, SDI true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b1;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b0;
            nCS3_reg_next = 1'b1;
          end
          else begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on19;
            //Entry 'on19'
            //on15 %activate B output, SDI true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b0;
            nCS3_reg_next = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_on2 :
        begin
          //During 'on2'
          //Transition
          t_13 = {1'b0, cnt_clk};
          add_temp_11 = t_13 + 9'b000000001;
          if (add_temp_11[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_11[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on3;
            //Entry 'on3'
            //nGA must be always true, SDI=true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b1;
          end
          else begin
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b0;
          end
        end
      state_type_is_dispatcher_IN_on20 :
        begin
          //During 'on20'
          //Transition
          t_14 = {1'b0, cnt_clk};
          add_temp_12 = t_14 + 9'b000000001;
          if (add_temp_12[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_12[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on12;
            //Entry 'on12'
            //IDNTC bit, SDI=true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
          end
          else begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on20;
            //Entry 'on20'
            //activate nA output, SDI false
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b1;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b0;
          end
        end
      state_type_is_dispatcher_IN_on21 :
        begin
          //During 'on21'
          //Transition
          t_15 = {1'b0, cnt_clk};
          add_temp_13 = t_15 + 9'b000000001;
          if (add_temp_13[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_13[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on20;
            //Entry 'on20'
            //activate nA output, SDI false
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b1;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b0;
          end
          else begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on21;
            //Entry 'on21'
            //activate nA output, SDI false
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b0;
          end
        end
      state_type_is_dispatcher_IN_on22 :
        begin
          //During 'on22'
          //Transition
          t_16 = {1'b0, cnt_clk};
          add_temp_14 = t_16 + 9'b000000001;
          if (add_temp_14[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_14[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on12;
            //Entry 'on12'
            //IDNTC bit, SDI=true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
          end
          else begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on22;
            //Entry 'on22'
            //on15 %activate B output, SDI true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b1;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b0;
          end
        end
      state_type_is_dispatcher_IN_on23 :
        begin
          //During 'on23'
          //Transition
          t_17 = {1'b0, cnt_clk};
          add_temp_15 = t_17 + 9'b000000001;
          if (add_temp_15[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_15[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on22;
            //Entry 'on22'
            //on15 %activate B output, SDI true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b1;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b0;
          end
          else begin
            //Transition
            is_dispatcher_next = state_type_is_dispatcher_IN_on23;
            //Entry 'on23'
            //on15 %activate B output, SDI true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b0;
            nCS1_reg_next = 1'b1;
            nCS2_reg_next = 1'b1;
            nCS3_reg_next = 1'b0;
          end
        end
      state_type_is_dispatcher_IN_on3 :
        begin
          //During 'on3'
          //Transition
          t_18 = {1'b0, cnt_clk};
          add_temp_16 = t_18 + 9'b000000001;
          if (add_temp_16[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_16[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on4;
            //Entry 'on4'
            //nshdn must be always true, SDI=true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b0;
          end
          else begin
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_on4 :
        begin
          //During 'on4'
          //Transition
          t_19 = {1'b0, cnt_clk};
          add_temp_17 = t_19 + 9'b000000001;
          if (add_temp_17[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_17[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on5;
            //Entry 'on5'
            //nshdn must be always true, SDI=true
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b1;
            cnt_temp = 8'd8;
          end
          else begin
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b0;
          end
        end
      state_type_is_dispatcher_IN_on5 :
        begin
          //During 'on5'
          //Transition
          t_20 = {1'b0, cnt_clk};
          add_temp_18 = t_20 + 9'b000000001;
          if (add_temp_18[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_18[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on6;
            //Entry 'on6'
            //SDI=v1_1
            done_reg_next = 1'b0;
            SDI_reg_next = vector_bin[$signed({1'b0, cnt}) - 9'sb000000001];
            SCK_reg_next = 1'b0;
          end
          else begin
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b1;
            SCK_reg_next = 1'b1;
            cnt_temp = 8'd8;
          end
        end
      state_type_is_dispatcher_IN_on6 :
        begin
          //During 'on6'
          //Transition
          t_21 = {1'b0, cnt_clk};
          add_temp_19 = t_21 + 9'b000000001;
          if (add_temp_19[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_19[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on7;
            //Entry 'on7'
            //SDI=v1_1
            done_reg_next = 1'b0;
            SDI_reg_next = vector_bin[$signed({1'b0, cnt}) - 9'sb000000001];
            SCK_reg_next = 1'b1;
          end
          else begin
            done_reg_next = 1'b0;
            SDI_reg_next = vector_bin[$signed({1'b0, cnt}) - 9'sb000000001];
            SCK_reg_next = 1'b0;
          end
        end
      state_type_is_dispatcher_IN_on7 :
        begin
          //During 'on7'
          //Transition
          t_22 = {1'b0, cnt_clk};
          add_temp_20 = t_22 + 9'b000000001;
          if (add_temp_20[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_20[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            //Transition
            t_26 = {1'b0, cnt};
            sub_temp = t_26 - 9'sb000000001;
            if (sub_temp[8] == 1'b1) begin
              cnt_temp = 8'b00000000;
            end
            else begin
              cnt_temp = sub_temp[7:0];
            end
            if (cnt_temp < 8'b00000001) begin
              //Transition
              is_dispatcher_next = state_type_is_dispatcher_IN_on9;
              //Entry 'on9'
              //SDI=v1_1
              done_reg_next = 1'b0;
              SDI_reg_next = 1'b0;
              SCK_reg_next = 1'b0;
            end
            else if (cnt_temp >= 8'b00000001) begin
              //Transition
              is_dispatcher_next = state_type_is_dispatcher_IN_on6;
              //Entry 'on6'
              //SDI=v1_1
              done_reg_next = 1'b0;
              SDI_reg_next = vector_bin[cnt_temp - 8'b00000001];
              SCK_reg_next = 1'b0;
            end
            else begin
              guard2 = 1'b1;
            end
          end
          else begin
            guard2 = 1'b1;
          end
        end
      state_type_is_dispatcher_IN_on8 :
        begin
          //During 'on8'
          //Transition
          t_23 = {1'b0, cnt_clk};
          add_temp_21 = t_23 + 9'b000000001;
          if (add_temp_21[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_21[7:0];
          end
          if (cnt_clk_temp > 8'b00000011) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on11;
            //Entry 'on11'
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
            cnt_temp = 8'd8;
          end
          else begin
            done_reg_next = 1'b1;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
            cnt_temp = 8'd8;
          end
        end
      default :
        begin
          //case IN_on9:
          //During 'on9'
          //Transition
          t_24 = {1'b0, cnt_clk};
          add_temp_22 = t_24 + 9'b000000001;
          if (add_temp_22[8] != 1'b0) begin
            cnt_clk_temp = 8'b11111111;
          end
          else begin
            cnt_clk_temp = add_temp_22[7:0];
          end
          if (cnt_clk_temp > 8'b00000010) begin
            //Transition
            cnt_clk_temp = 8'd0;
            is_dispatcher_next = state_type_is_dispatcher_IN_on10;
            //Entry 'on10'
            //SDI=v1_1
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b1;
          end
          else begin
            done_reg_next = 1'b0;
            SDI_reg_next = 1'b0;
            SCK_reg_next = 1'b0;
          end
        end
    endcase
    if (guard2) begin
      done_reg_next = 1'b0;
      SDI_reg_next = vector_bin[$signed({1'b0, cnt_temp}) - 9'sb000000001];
      SCK_reg_next = 1'b1;
    end
    if (guard1) begin
      done_reg_next = 1'b0;
      SDI_reg_next = 1'b0;
      SCK_reg_next = 1'b1;
    end
    cnt_next = cnt_temp;
    cnt_clk_next = cnt_clk_temp;
  end

  assign done = done_reg_next;
  assign SDI = SDI_reg_next;
  assign SCK = SCK_reg_next;
  assign nCS1 = nCS1_reg_next;
  assign nCS2 = nCS2_reg_next;
  assign nCS3 = nCS3_reg_next;


endmodule  // dispatcher

