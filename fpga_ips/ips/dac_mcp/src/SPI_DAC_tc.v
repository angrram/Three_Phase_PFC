// -------------------------------------------------------------
// 
// File Name: C:\Users\angro\Desktop\hil\dac\SPI_DAC\int2bin_sdi\SPI_DAC_tc.v
// Created: 2024-11-01 14:25:55
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SPI_DAC_tc
// Source Path: SPI_DAC_tc
// Hierarchy Level: 1
// 
// Master clock enable input: clk_enable
// 
// enb_200000000_1_0: identical to clk_enable
// enb         : 200000000x slower than clk with last phase
// enb_1_1_1   : 200000000x slower than clk with phase 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SPI_DAC_tc
          (clk,
           clk_enable,
           enb_200000000_1_0,
           enb,
           enb_1_1_1);


  input   clk;
  input   clk_enable;
  output  enb_200000000_1_0;
  output  enb;
  output  enb_1_1_1;


  reg [27:0] count200000000;  // ufix28
  wire comp_0_tmp;
  wire phase_0_tmp;
  reg  phase_0;
  wire enb_1;
  wire phase_delay_ctrl_const_out;
  reg  phase_delay_ctrl_delay_out;
  wire phase_delay_Initial_Val_out;
  wire comp_1_tmp;
  wire phase_1_tmp;
  reg  phase_delay_out;
  wire phase_1;
  wire enb_1_1_1_1;

  initial begin
    count200000000 = 28'b0000000000000000000000000001;
    phase_0 = 1'b0;
    phase_delay_ctrl_delay_out = 1'b0;
    phase_delay_out = 1'b0;
  end

  assign enb_200000000_1_0 = clk_enable;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 199999999
  always @(posedge clk)
    begin : counter_200000000_process
      if (clk_enable) begin
        if (count200000000 >= 28'b1011111010111100000111111111) begin
          count200000000 <= 28'b0000000000000000000000000000;
        end
        else begin
          count200000000 <= count200000000 + 28'b0000000000000000000000000001;
        end
      end
    end

  assign comp_0_tmp = count200000000 == 28'b1011111010111100000111111111;

  assign phase_0_tmp = comp_0_tmp & clk_enable;

  always @(posedge clk)
    begin : phase_delay_process
      if (clk_enable) begin
        phase_0 <= phase_0_tmp;
      end
    end

  assign enb_1 = phase_0 & clk_enable;

  assign enb = enb_1;

  assign phase_delay_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : phase_delay_ctrl_delay_process
      if (clk_enable) begin
        phase_delay_ctrl_delay_out <= phase_delay_ctrl_const_out;
      end
    end

  assign phase_delay_Initial_Val_out = 1'b1;

  assign comp_1_tmp = count200000000 == 28'b0000000000000000000000000000;

  assign phase_1_tmp = comp_1_tmp & clk_enable;

  always @(posedge clk)
    begin : phase_delay_1_process
      if (clk_enable) begin
        phase_delay_out <= phase_1_tmp;
      end
    end

  assign phase_1 = (phase_delay_ctrl_delay_out == 1'b0 ? phase_delay_Initial_Val_out :
              phase_delay_out);

  assign enb_1_1_1_1 = phase_1 & clk_enable;

  assign enb_1_1_1 = enb_1_1_1_1;

endmodule  // SPI_DAC_tc

