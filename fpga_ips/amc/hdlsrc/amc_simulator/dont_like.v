// -------------------------------------------------------------
// 
// File Name: .\hdlsrc\amc_simulator\dont_like.v
// Created: 2025-05-11 20:24:47
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dont_like
// Source Path: amc_simulator/amc_simulator/dont_like
// Hierarchy Level: 1
// Model version: 3.50
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dont_like
          (clk,
           rst,
           enb,
           v,
           Out1);


  input   clk;
  input   rst;
  input   enb;
  input   [15:0] v;  // uint16
  output  Out1;


  wire HDL_Counter_ctrl_const_out;
  reg  HDL_Counter_ctrl_delay_out;
  wire [15:0] HDL_Counter_Initial_Val_out;  // uint16
  wire [15:0] count_step;  // uint16
  wire [15:0] count_from;  // uint16
  wire [15:0] cnt;  // uint16
  wire [15:0] count;  // uint16
  wire need_to_wrap;
  wire [15:0] count_value;  // uint16
  reg [15:0] HDL_Counter_out;  // uint16
  reg [15:0] Delay6_out1;  // uint16
  wire [15:0] const_50_out1;  // uint16
  reg [15:0] Delay3_out1;  // uint16
  wire range_hit;
  wire hit_cnt;
  reg  Delay1_out1;
  reg [15:0] Delay2_out1;  // uint16
  reg [15:0] Delay_bypass_delay;  // ufix16
  reg [15:0] Delay_reg;  // ufix16
  wire [15:0] delay_out;  // uint16
  wire [16:0] sum_1;  // ufix17
  wire [16:0] sum_2;  // ufix17
  wire [16:0] dc_vb;  // ufix17
  reg [16:0] Delay4_out1;  // ufix17
  wire [16:0] relation_operator_1;  // ufix17
  wire pwm;
  reg  Delay5_out1;


  assign HDL_Counter_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : HDL_Counter_ctrl_delay_process
      if (rst == 1'b1) begin
        HDL_Counter_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          HDL_Counter_ctrl_delay_out <= HDL_Counter_ctrl_const_out;
        end
      end
    end

  assign HDL_Counter_Initial_Val_out = 16'b0000000000000001;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 4960
  assign count_step = 16'b0000000000000001;
  assign count_from = 16'b0000000000000001;
  assign count = cnt + count_step;
  assign need_to_wrap = cnt == 16'b0001001101100000;
  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);
  always @(posedge clk)
    begin : HDL_Counter_process
      if (rst == 1'b1) begin
        HDL_Counter_out <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          HDL_Counter_out <= count_value;
        end
      end
    end
  assign cnt = (HDL_Counter_ctrl_delay_out == 1'b0 ? HDL_Counter_Initial_Val_out :
              HDL_Counter_out);

  always @(posedge clk)
    begin : Delay6_process
      if (rst == 1'b1) begin
        Delay6_out1 <= 16'b0000000111101010;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= cnt;
        end
      end
    end
  assign const_50_out1 = 16'b0000000110011001;
  always @(posedge clk)
    begin : Delay3_process
      if (rst == 1'b1) begin
        Delay3_out1 <= 16'b0000000111101010;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= const_50_out1;
        end
      end
    end
  assign range_hit = cnt > 16'b1111111111111110;
  assign hit_cnt = need_to_wrap | range_hit;
  always @(posedge clk)
    begin : Delay1_process
      if (rst == 1'b1) begin
        Delay1_out1 <= 1'b1;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= hit_cnt;
        end
      end
    end
  always @(posedge clk)
    begin : Delay2_process
      if (rst == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000001;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= v;
        end
      end
    end
  always @(posedge clk)
    begin : Delay_process
      if (rst == 1'b1) begin
        Delay_bypass_delay <= 16'b0000000000000000;
        Delay_reg <= 16'b0000000000000000;
      end
      else begin
        if (enb && Delay1_out1) begin
          Delay_bypass_delay <= Delay_reg;
          Delay_reg <= Delay2_out1;
        end
      end
    end

  assign delay_out = (Delay1_out1 == 1'b1 ? Delay_reg :
              Delay_bypass_delay);
  assign sum_1 = {1'b0, Delay3_out1};
  assign sum_2 = {1'b0, delay_out};
  assign dc_vb = sum_1 + sum_2;
  always @(posedge clk)
    begin : Delay4_process
      if (rst == 1'b1) begin
        Delay4_out1 <= 17'b00000000111101010;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= dc_vb;
        end
      end
    end
  assign relation_operator_1 = {1'b0, Delay6_out1};
  assign pwm = relation_operator_1 <= Delay4_out1;
  always @(posedge clk)
    begin : Delay5_process
      if (rst == 1'b1) begin
        Delay5_out1 <= 1'b1;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= pwm;
        end
      end
    end
  assign Out1 = Delay5_out1;

endmodule  // dont_like

